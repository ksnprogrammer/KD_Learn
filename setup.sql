-- KingDragons Kingdom Setup Script
-- This script sets up the necessary tables, functions, and security policies for the kingdom.

-- 1. Create Tables

-- Profiles table to store public user data and game stats
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  updated_at timestamp with time zone,
  xp integer not null default 0,
  
  primary key (id),
  constraint xp_not_negative check (xp >= 0)
);
-- Alter profiles table to add RLS
alter table public.profiles enable row level security;
-- Allow users to see all profiles
create policy "Public profiles are viewable by everyone."
  on public.profiles for select
  using ( true );
-- Allow users to update their own profile
create policy "Users can update their own profile."
  on public.profiles for update
  using ( auth.uid() = id );


-- Submissions table for user-generated content/modules
create table public.submissions (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  topic text not null,
  writer text,
  status text not null default 'Pending'::text,
  content jsonb,
  exam_level text,
  image_data_uri text
);
-- Alter submissions table to add RLS
alter table public.submissions enable row level security;
-- Allow admins to manage submissions
create policy "Admins can manage submissions."
  on public.submissions for all
  using ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );
-- Allow authenticated users to view approved submissions
create policy "Users can view approved submissions."
  on public.submissions for select
  using ( auth.role() = 'authenticated' and status = 'Approved' );
  

-- Stories table for AI-generated stories
create table public.stories (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  title text not null,
  story text not null,
  image_data_uri text
);
-- Alter stories table to add RLS
alter table public.stories enable row level security;
-- Allow anyone to read stories
create policy "Stories are public."
  on public.stories for select
  using ( true );
-- Allow admins to create stories
create policy "Admins can create stories."
  on public.stories for insert
  with check ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );


-- Posts table for community discussions
create table public.posts (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  content text not null,
  author_name text not null,
  author_avatar text
);
-- Alter posts table to add RLS
alter table public.posts enable row level security;
-- Allow anyone to read posts
create policy "Posts are public."
  on public.posts for select
  using ( true );
-- Allow authenticated users to create posts
create policy "Authenticated users can create posts."
  on public.posts for insert
  with check ( auth.role() = 'authenticated' );
  
  
-- Payments table for membership/donation tracking
create table public.payments (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  user_name text not null,
  payment_type text not null,
  amount integer not null,
  status text not null default 'Pending'::text,
  receipt_url text
);
-- Alter payments table to add RLS
alter table public.payments enable row level security;
-- Allow admins to manage payments
create policy "Admins can manage payments."
  on public.payments for all
  using ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );
-- Allow authenticated users to create payments
create policy "Authenticated users can create payments."
  on public.payments for insert
  with check ( auth.role() = 'authenticated' );


-- Quest completions table to track user progress
create table public.quest_completions (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null references auth.users on delete cascade,
    submission_id bigint not null references public.submissions on delete cascade,
    score integer not null,
    total_questions integer not null,
    unique(user_id, submission_id)
);
-- Alter quest_completions table to add RLS
alter table public.quest_completions enable row level security;
-- Allow users to view their own completions
create policy "Users can view their own quest completions."
  on public.quest_completions for select
  using ( auth.uid() = user_id );
-- Allow users to insert their own completions
create policy "Users can insert their own quest completions."
  on public.quest_completions for insert
  with check ( auth.uid() = user_id );


-- 2. Create Functions and Triggers

-- Function to automatically create a profile for new users
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, xp)
  values (new.id, 0);
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Function to award XP to a user
create or replace function public.award_xp(user_id_in uuid, xp_to_add integer)
returns void
language plpgsql
security definer set search_path = public
as $$
begin
  update public.profiles
  set xp = xp + xp_to_add
  where id = user_id_in;
end;
$$;


-- Function to get the leaderboard
create or replace function public.get_leaderboard()
returns table (
  rank bigint,
  name text,
  xp integer,
  avatar_url text,
  avatar_hint text
)
language plpgsql
as $$
begin
  return query
  select
    row_number() over (order by p.xp desc) as rank,
    (u.raw_user_meta_data ->> 'name')::text as name,
    p.xp,
    (u.raw_user_meta_data ->> 'avatar_url')::text as avatar_url,
    (u.raw_user_meta_data ->> 'avatar_hint')::text as avatar_hint
  from
    public.profiles p
    join auth.users u on p.id = u.id
  order by
    p.xp desc
  limit 100;
end;
$$;


-- 3. Set up Storage
-- This section handles the storage bucket for payment receipts.
-- The bucket is created as public, but policies secure who can upload/update files.

insert into storage.buckets (id, name, public)
values ('receipts', 'receipts', true)
on conflict (id) do nothing;

create policy "Receipts are publicly viewable."
  on storage.objects for select
  using ( bucket_id = 'receipts' );

create policy "Users can upload their own receipts."
  on storage.objects for insert
  with check ( bucket_id = 'receipts' and auth.uid() = (storage.foldername(name))[1]::uuid );

create policy "Users can update their own receipts."
    on storage.objects for update
    using ( auth.uid() = (storage.foldername(name))[1]::uuid );
