-- Profiles Table: Stores public user data
-- This table is essential for the leaderboard and user stats.
create table
  public.profiles (
    id uuid not null primary key,
    xp integer null default 0,
    constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
  );

-- Submissions Table: Stores AI-generated learning modules
create table
  public.submissions (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    topic text null,
    writer text null,
    status text null,
    content jsonb null,
    exam_level text null,
    image_data_uri text null,
    constraint submissions_pkey primary key (id)
  );

-- Stories Table: Stores AI-generated stories
create table
  public.stories (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text null,
    story text null,
    image_data_uri text null,
    constraint stories_pkey primary key (id)
  );

-- Posts Table: Stores user-generated discussion posts
create table
  public.posts (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    content text null,
    author_name text null,
    author_avatar text null,
    constraint posts_pkey primary key (id)
  );

-- Quest Completions Table: Tracks which users have completed which quests
create table
  public.quest_completions (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id uuid null,
    submission_id bigint null,
    score integer null,
    total_questions integer null,
    constraint quest_completions_pkey primary key (id),
    constraint quest_completions_submission_id_fkey foreign key (submission_id) references submissions (id) on delete set null,
    constraint quest_completions_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  );

-- Payments Table: Tracks user payments for memberships and donations
create table
  public.payments (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_name text null,
    payment_type text null,
    amount integer null,
    status text null,
    receipt_url text null,
    constraint payments_pkey primary key (id)
  );

-- Function to get the leaderboard
create or replace function get_leaderboard()
returns table(rank bigint, id uuid, name text, xp integer, avatar_url text, avatar_hint text)
language plpgsql
as $$
begin
  return query
  select
    row_number() over (order by p.xp desc) as rank,
    u.id,
    u.raw_user_meta_data->>'name' as name,
    p.xp,
    u.raw_user_meta_data->>'avatar_url' as avatar_url,
    u.raw_user_meta_data->>'avatar_hint' as avatar_hint
  from
    public.profiles p
    join auth.users u on p.id = u.id
  order by
    p.xp desc;
end;
$$;

-- Function to award XP and create a profile if one doesn't exist
create or replace function award_xp(user_id_in uuid, xp_to_add integer)
returns void
language plpgsql
as $$
begin
  -- Upsert profile on XP gain
  insert into public.profiles (id, xp)
  values (user_id_in, xp_to_add)
  on conflict (id)
  do update set xp = profiles.xp + xp_to_add;
end;
$$;

-- Secure the tables with Row Level Security
alter table public.profiles enable row level security;
alter table public.submissions enable row level security;
alter table public.stories enable row level security;
alter table public.posts enable row level security;
alter table public.quest_completions enable row level security;
alter table public.payments enable row level security;

-- Policies for Profiles
create policy "Public profiles are viewable by everyone." on public.profiles for select using ( true );
create policy "Users can insert their own profile." on public.profiles for insert with check ( auth.uid() = id );
create policy "Users can update their own profile." on public.profiles for update using ( auth.uid() = id );

-- Policies for Submissions
create policy "Approved submissions are viewable by everyone." on public.submissions for select using ( status = 'Approved' );
create policy "Admins can manage all submissions." on public.submissions for all using ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' ) with check ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );

-- Policies for Stories
create policy "Stories are viewable by everyone." on public.stories for select using ( true );
create policy "Admins can manage stories." on public.stories for all using ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' ) with check ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );

-- Policies for Posts
create policy "Posts are viewable by authenticated users." on public.posts for select using ( auth.role() = 'authenticated' );
create policy "Users can create their own posts." on public.posts for insert with check ( auth.role() = 'authenticated' );

-- Policies for Quest Completions
create policy "Users can view their own quest completions." on public.quest_completions for select using ( auth.uid() = user_id );
create policy "Users can insert their own quest completions." on public.quest_completions for insert with check ( auth.uid() = user_id );

-- Policies for Payments
create policy "Admins can manage payments." on public.payments for all using ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' ) with check ( (select auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin' );
create policy "Users can insert their own payments." on public.payments for insert with check ( auth.role() = 'authenticated' );
