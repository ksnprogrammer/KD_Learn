-- profiles table (for user metadata, linked to auth.users)
CREATE TABLE public.profiles (
  id uuid REFERENCES auth.users ON DELETE CASCADE,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  name text,
  exam_level text,
  role text DEFAULT 'knight'::text,
  avatar_url text,
  avatar_hint text,
  phone text,
  nic text,
  xp integer DEFAULT 0 NOT NULL,
  PRIMARY KEY (id)
);

-- submissions table (for AI-generated modules)
CREATE TABLE public.submissions (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  topic text,
  writer text,
  status text DEFAULT 'Pending'::text,
  content jsonb,
  exam_level text,
  image_data_uri text,
  PRIMARY KEY (id)
);

-- stories table (for AI-generated stories)
CREATE TABLE public.stories (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  title text,
  story text,
  image_data_uri text,
  PRIMARY KEY (id)
);

-- posts table (for user posts/feed)
CREATE TABLE public.posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  content text,
  author_name text,
  author_avatar text,
  PRIMARY KEY (id)
);

-- payments table (for payment submissions)
CREATE TABLE public.payments (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  user_name text,
  payment_type text,
  amount numeric,
  status text DEFAULT 'Pending'::text,
  receipt_url text,
  PRIMARY KEY (id)
);

-- quest_completions table (to track completed quests/modules)
CREATE TABLE public.quest_completions (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  user_id uuid REFERENCES auth.users ON DELETE CASCADE,
  submission_id bigint REFERENCES public.submissions ON DELETE CASCADE,
  score integer,
  total_questions integer,
  PRIMARY KEY (id)
);

-- Function to award XP to a user
CREATE OR REPLACE FUNCTION public.award_xp(user_id_in uuid, xp_to_add integer)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.profiles (id, xp)
  VALUES (user_id_in, xp_to_add)
  ON CONFLICT (id) DO UPDATE
  SET xp = public.profiles.xp + xp_to_add;
END;
$$;

-- Function to get leaderboard data
CREATE OR REPLACE FUNCTION public.get_leaderboard()
RETURNS TABLE (
  id uuid,
  name text,
  xp integer,
  avatar_url text,
  avatar_hint text
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    p.id,
    p.name,
    p.xp,
    p.avatar_url,
    p.avatar_hint
  FROM
    public.profiles p
  ORDER BY
    p.xp DESC;
END;
$$;