-- WARNING: This script will permanently delete all data in the specified tables.
-- Only run this if you are sure you want to reset your database schema and data.

-- Drop existing tables and functions if they exist (use with caution as it deletes data)
DROP TABLE IF EXISTS user_quest_completions CASCADE;
DROP TABLE IF EXISTS user_stats CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS posts CASCADE;
DROP TABLE IF EXISTS stories CASCADE;
DROP TABLE IF EXISTS submissions CASCADE;
DROP TABLE IF EXISTS profiles CASCADE;

DROP FUNCTION IF EXISTS award_xp(uuid, integer);
DROP FUNCTION IF EXISTS award_xp_and_quest(uuid, integer);

-- 1. Profiles Table
-- Stores extended user profile information, linked to auth.users
CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  name TEXT,
  exam_level TEXT,
  gender TEXT,
  phone TEXT,
  nic TEXT,
  avatar_url TEXT,
  avatar_hint TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own profile." ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile." ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "New users can create a profile." ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

GRANT SELECT, INSERT, UPDATE ON profiles TO authenticated;

-- 2. Submissions Table
-- Stores AI-generated module submissions for review
CREATE TABLE submissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  topic TEXT NOT NULL,
  writer TEXT,
  status TEXT DEFAULT 'Pending' NOT NULL, -- e.g., 'Pending', 'Approved', 'Rejected'
  content JSONB NOT NULL, -- Stores the module content as JSON
  exam_level TEXT,
  image_data_uri TEXT
);

ALTER TABLE submissions ENABLE ROW LEVEL SECURITY;

-- Admin can view all submissions
CREATE POLICY "Admins can view all submissions." ON submissions
  FOR SELECT USING (EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND exam_level = 'admin')); -- Assuming 'admin' role is in profiles.exam_level

-- Users can submit modules
CREATE POLICY "Users can submit modules." ON submissions
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Admins can update submission status
CREATE POLICY "Admins can update submission status." ON submissions
  FOR UPDATE USING (EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND exam_level = 'admin'));

GRANT SELECT, INSERT, UPDATE ON submissions TO authenticated;

-- 3. Stories Table
-- Stores AI-generated stories
CREATE TABLE stories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  title TEXT NOT NULL,
  story TEXT NOT NULL,
  image_data_uri TEXT
);

ALTER TABLE stories ENABLE ROW LEVEL SECURITY;

-- All authenticated users can view stories
CREATE POLICY "All authenticated users can view stories." ON stories
  FOR SELECT USING (auth.role() = 'authenticated');

-- Authenticated users can insert stories
CREATE POLICY "Authenticated users can insert stories." ON stories
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

GRANT SELECT, INSERT ON stories TO authenticated;

-- 4. Posts Table
-- Stores user-generated posts
CREATE TABLE posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  content TEXT NOT NULL,
  author_name TEXT,
  author_avatar TEXT
);

ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- All authenticated users can view posts
CREATE POLICY "All authenticated users can view posts." ON posts
  FOR SELECT USING (auth.role() = 'authenticated');

-- Authenticated users can create posts
CREATE POLICY "Authenticated users can create posts." ON posts
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own posts
CREATE POLICY "Users can update their own posts." ON posts
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own posts
CREATE POLICY "Users can delete their own posts." ON posts
  FOR DELETE USING (auth.uid() = user_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON posts TO authenticated;

-- 5. Payments Table
-- Stores payment submissions for review
CREATE TABLE payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_name TEXT NOT NULL,
  payment_type TEXT NOT NULL,
  amount NUMERIC NOT NULL,
  status TEXT DEFAULT 'Pending' NOT NULL, -- e.g., 'Pending', 'Approved', 'Rejected'
  receipt_url TEXT
);

ALTER TABLE payments ENABLE ROW LEVEL SECURITY;

-- Admin can view all payments
CREATE POLICY "Admins can view all payments." ON payments
  FOR SELECT USING (EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND exam_level = 'admin'));

-- Authenticated users can submit payments
CREATE POLICY "Authenticated users can submit payments." ON payments
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Admins can update payment status
CREATE POLICY "Admins can update payment status." ON payments
  FOR UPDATE USING (EXISTS (SELECT 1 FROM public.profiles WHERE id = auth.uid() AND exam_level = 'admin'));

GRANT SELECT, INSERT, UPDATE ON payments TO authenticated;

-- 6. User Stats Table
-- Stores user experience, level, and other game-related stats
CREATE TABLE user_stats (
  user_id UUID REFERENCES auth.users(id) PRIMARY KEY,
  xp INTEGER DEFAULT 0 NOT NULL,
  level INTEGER DEFAULT 1 NOT NULL,
  progress INTEGER DEFAULT 0 NOT NULL,
  quests_completed INTEGER DEFAULT 0 NOT NULL,
  rank TEXT DEFAULT 'N/A' NOT NULL, -- Could be 'Knight', 'Lord', etc. or a numerical rank
  active_streak INTEGER DEFAULT 0 NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE user_stats ENABLE ROW LEVEL SECURITY;

-- Users can view their own stats
CREATE POLICY "Users can view their own stats." ON user_stats
  FOR SELECT USING (auth.uid() = user_id);

-- Users can update their own stats (via functions only, not direct update)
CREATE POLICY "Users can update their own stats via functions." ON user_stats
  FOR UPDATE USING (auth.uid() = user_id);

-- New users can create their stats entry
CREATE POLICY "New users can create stats entry." ON user_stats
  FOR INSERT WITH CHECK (auth.uid() = user_id);

GRANT SELECT, INSERT, UPDATE ON user_stats TO authenticated;

-- 7. User Quest Completions Table
-- Tracks which quests a user has completed
CREATE TABLE user_quest_completions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  submission_id BIGINT REFERENCES submissions(id) NOT NULL, -- References the completed module/quest
  score INTEGER,
  total_questions INTEGER,
  xp_gained INTEGER
);

ALTER TABLE user_quest_completions ENABLE ROW LEVEL SECURITY;

-- Users can view their own quest completions
CREATE POLICY "Users can view their own quest completions." ON user_quest_completions
  FOR SELECT USING (auth.uid() = user_id);

-- Users can insert their own quest completions
CREATE POLICY "Users can insert their own quest completions." ON user_quest_completions
  FOR INSERT WITH CHECK (auth.uid() = user_id);

GRANT SELECT, INSERT ON user_quest_completions TO authenticated;

-- Functions (RPC calls)

-- Function to award XP to a user
CREATE OR REPLACE FUNCTION award_xp(user_id_in UUID, xp_to_add INTEGER)
RETURNS VOID AS $$
BEGIN
  INSERT INTO public.user_stats (user_id, xp)
  VALUES (user_id_in, xp_to_add)
  ON CONFLICT (user_id) DO UPDATE
  SET xp = public.user_stats.xp + xp_to_add,
      updated_at = NOW();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execution to authenticated users
GRANT EXECUTE ON FUNCTION award_xp(uuid, integer) TO authenticated;

-- Function to award XP and increment quests_completed
CREATE OR REPLACE FUNCTION award_xp_and_quest(user_id_in UUID, xp_to_add INTEGER)
RETURNS VOID AS $$
BEGIN
  INSERT INTO public.user_stats (user_id, xp, quests_completed)
  VALUES (user_id_in, xp_to_add, 1)
  ON CONFLICT (user_id) DO UPDATE
  SET xp = public.user_stats.xp + xp_to_add,
      quests_completed = public.user_stats.quests_completed + 1,
      updated_at = NOW();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execution to authenticated users
GRANT EXECUTE ON FUNCTION award_xp_and_quest(uuid, integer) TO authenticated;
